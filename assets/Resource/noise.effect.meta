{
  "ver": "1.0.27",
  "uuid": "680b43e3-3436-4553-95b5-04e6cc2d44c0",
  "importer": "effect",
  "compiledShaders": [
    {
      "glsl1": {
        "vert": "\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\nattribute vec4 a_color;\nvarying vec4 v_color;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n#endif\n  varying vec4 v_color;\n  #if USE_TEXTURE\n  varying vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform float time;\nvec3 random3(vec3 c) {\n  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n  vec3 r;\n  r.z = fract(512.0*j);\n  j *= .125;\n  r.x = fract(512.0*j);\n  j *= .125;\n  r.y = fract(512.0*j);\n  return r-0.5;\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat simplex3d(vec3 p) {\n   vec3 s = floor(p + dot(p, vec3(F3)));\n   vec3 x = p - s + dot(s, vec3(G3));\n   vec3 e = step(vec3(0.0), x - x.yzx);\n   vec3 i1 = e*(1.0 - e.zxy);\n   vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n   vec3 x1 = x - i1 + G3;\n   vec3 x2 = x - i2 + 2.0*G3;\n   vec3 x3 = x - 1.0 + 3.0*G3;\n   vec4 w, d;\n   w.x = dot(x, x);\n   w.y = dot(x1, x1);\n   w.z = dot(x2, x2);\n   w.w = dot(x3, x3);\n   w = max(0.6 - w, 0.0);\n   d.x = dot(random3(s), x);\n   d.y = dot(random3(s + i1), x1);\n   d.z = dot(random3(s + i2), x2);\n   d.w = dot(random3(s + 1.0), x3);\n   w *= w;\n   w *= w;\n   d *= 2048.0 * w;\n   return dot(d, vec4(52.0));\n}\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n  void main () {\n   vec2 p = v_uv0;\n  vec3 p3 = vec3(p, time*0.0725);\n  float value;\n  value = simplex3d(p3*2.0);\n  value = 0.5 + 0.5*value;\n  gl_FragColor = vec4(\n      vec3(value),\n      1.0);\n  }"
      },
      "glsl3": {
        "vert": "\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\nin vec4 a_color;\nout vec4 v_color;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 v_uv0;\n#endif\nvoid main () {\n  vec4 pos = vec4(a_position, 1);\n  #if CC_USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  v_uv0 = a_uv0;\n  #endif\n  v_color = a_color;\n  gl_Position = pos;\n}",
        "frag": "\n  precision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\n  in vec4 v_color;\n  #if USE_TEXTURE\n  in vec2 v_uv0;\n  uniform sampler2D texture;\n  #endif\n  uniform simple {\n    float time;\n  };\nvec3 random3(vec3 c) {\n  float j = 4096.0*sin(dot(c,vec3(17.0, 59.4, 15.0)));\n  vec3 r;\n  r.z = fract(512.0*j);\n  j *= .125;\n  r.x = fract(512.0*j);\n  j *= .125;\n  r.y = fract(512.0*j);\n  return r-0.5;\n}\nconst float F3 =  0.3333333;\nconst float G3 =  0.1666667;\nfloat simplex3d(vec3 p) {\n   vec3 s = floor(p + dot(p, vec3(F3)));\n   vec3 x = p - s + dot(s, vec3(G3));\n   vec3 e = step(vec3(0.0), x - x.yzx);\n   vec3 i1 = e*(1.0 - e.zxy);\n   vec3 i2 = 1.0 - e.zxy*(1.0 - e);\n   vec3 x1 = x - i1 + G3;\n   vec3 x2 = x - i2 + 2.0*G3;\n   vec3 x3 = x - 1.0 + 3.0*G3;\n   vec4 w, d;\n   w.x = dot(x, x);\n   w.y = dot(x1, x1);\n   w.z = dot(x2, x2);\n   w.w = dot(x3, x3);\n   w = max(0.6 - w, 0.0);\n   d.x = dot(random3(s), x);\n   d.y = dot(random3(s + i1), x1);\n   d.z = dot(random3(s + i2), x2);\n   d.w = dot(random3(s + 1.0), x3);\n   w *= w;\n   w *= w;\n   d *= 2048.0 * w;\n   return dot(d, vec4(52.0));\n}\nconst mat3 rot1 = mat3(-0.37, 0.36, 0.85,-0.14,-0.93, 0.34,0.92, 0.01,0.4);\nconst mat3 rot2 = mat3(-0.55,-0.39, 0.74, 0.33,-0.91,-0.24,0.77, 0.12,0.63);\nconst mat3 rot3 = mat3(-0.71, 0.52,-0.47,-0.08,-0.72,-0.68,-0.7,-0.45,0.56);\n  void main () {\n   vec2 p = v_uv0;\n  vec3 p3 = vec3(p, time*0.0725);\n  float value;\n  value = simplex3d(p3*2.0);\n  value = 0.5 + 0.5*value;\n  gl_FragColor = vec4(\n      vec3(value),\n      1.0);\n  }"
      }
    }
  ],
  "subMetas": {}
}